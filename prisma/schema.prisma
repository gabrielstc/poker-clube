model Player {
  id           String        @id @default(uuid())
  name         String        @unique
  transactions Transaction[]
  tournamentPlayers TournamentPlayer[]
}

model Transaction {
  id          String   @id @default(uuid())
  date        DateTime
  type        TransactionType
  value       Float
  description String?
  reconciled  Boolean  @default(false)
  playerId    String
  player      Player   @relation(fields: [playerId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum TransactionType {
  ENTRADA
  SAIDA
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Tournament {
  id        String             @id @default(uuid())
  name      String
  date      DateTime
  players   TournamentPlayer[]
  createdAt DateTime           @default(now())
}

model TournamentPlayer {
  id           String     @id @default(uuid())
  tournament   Tournament @relation(fields: [tournamentId], references: [id])
  tournamentId String
  player       Player     @relation(fields: [playerId], references: [id])
  playerId     String
  placement    Int?       // Colocação no torneio (1 = campeão, etc)
  rebuys       Int        @default(0)
  points       Float      @default(0)
}

model User {
  id       Int    @id @default(autoincrement())
  email    String @unique
  password String
  name     String
}